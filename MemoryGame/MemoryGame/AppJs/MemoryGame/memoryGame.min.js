angular.module("MemoryGame.controllers",[]);angular.module("MemoryGame.directives",[]);angular.module("MemoryGame.services",[]);angular.module("MemoryGame.factories",[]);angular.module("MemoryGame.factories").factory("cardFactory",[function(){function n(){var n=function(){function n(){return Math.floor((1+Math.random())*65536).toString(16).substring(1)}return function(){return n()+n()+"-"+n()+"-"+n()+"-"+n()+"-"+n()+n()+n()}}();this.create=function(t){var i=function(t){this.id=n();this.val=t;this.flip=function(){this.flipped=!0};this.flipBack=function(){this.flipped=!1};this.flipped=!1;this.discovered=!1};return new i(t)}}return new n}]);angular.module("MemoryGame.controllers").controller("mainCtrl",["$scope","gameRuleService","$rootScope","gameInfo",function(n,t,i,r){n.cards=i.cards;n.gameInfo=r;n.flipCard=function(n){t.flip(n)}}]);angular.module("MemoryGame.directives").directive("board",[function(){return{restrict:"E",replace:!0,transclude:!0,scope:{gameInfo:"="},templateUrl:"/AppJs/MemoryGame/app/directives/views/d.board.html",link:function(){}}}]);angular.module("MemoryGame.directives").directive("card",[function(){return{restrict:"E",replace:!0,scope:{model:"=",flip:"&"},templateUrl:"/AppJs/MemoryGame/app/directives/views/d.card.html",link:function(n){n.showVal=function(){return n.model.flipped?n.model.val:""}}}}]);angular.module("MemoryGame.services").factory("deckService",["cardFactory",function(n){function t(){function i(n){for(var i,r,t=n.length;t;i=Math.floor(Math.random()*t),r=n[--t],n[t]=n[i],n[i]=r);return n}var t;this.createDeck=function(r){var u=r,e=[],f,o,s,h;for((!u||u<0||!angular.isNumber(u))&&(u=10),f=0,o=1;f<u;f++,o++)s=n.create(f),h=n.create(f),e.push(s),e.push(h);return t=e,i(e)}}return new t}]);angular.module("MemoryGame.services").factory("gameRuleService",["$rootScope","gameInfo",function(n,t){function i(n,t){function r(){for(var n=0,t=0;n<i.length;n++)if(i[n].flipped&&!i[n].discovered&&(t++,t>=2))return!0;return!1}function u(){for(var t=[],n=0;n<i.length;n++)i[n].flipped&&!i[n].discovered&&t.push(i[n]);return t}function f(n){var t=n[0],i=n[1];return t.val===i.val?!0:!1}function e(n){t.score++;for(var i=0;i<n.length;i++)n[i].discovered=!0}function o(n){return n.discovered?!1:!0}function s(){for(var n=0;n<i.length;n++)i[n].discovered||i[n].flipBack()}var i=n;this.flip=function(n){if(r()){var i=u();f(i)&&e(i);s()}o(n)&&(t.clicks+=1,n.flip())}}return new i(n.cards,t)}]);angular.module("MemoryGame",["MemoryGame.controllers","MemoryGame.directives","MemoryGame.services","MemoryGame.factories"]).constant("gameInfo",{clicks:0,score:0,cards:18}).run(["$rootScope","deckService","gameInfo",function(n,t,i){n.cards=t.createDeck(i.cards)}]);
/*
//# sourceMappingURL=memoryGame.min.js.map
*/